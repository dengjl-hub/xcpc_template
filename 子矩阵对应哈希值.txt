//子矩阵对应哈希值
#include<bits/stdc++.h>
using namespace std;
const int N = 1000;

 
const int maxn = 1e3+5;
const int MAXN = 1e3+5;
typedef unsigned long long ull;
ull p = 13331,p1 = 233333;
ull HashA[maxn][maxn];
ull HashA1[maxn][maxn];
ull Powp[maxn];
ull Powp1[maxn];
char str[N][N];
void init() {
    Powp[0]=1;
    Powp1[0] = 1;
    for(int i=1;i<MAXN;i++) {
        Powp[i] = Powp[i - 1] * p;
        Powp1[i] = Powp1[i - 1] * p1;
    }
}
void make_hash(int n,int m){//字符串的范围得ｉ个ｈａｓｈ存储每行哈希值
    for(int i = 1; i <= n; ++ i) {
        for(int j = 1; j <= m; ++ j) {
            HashA[i][j] = HashA[i][j - 1] * p + str[i][j];
            HashA1[i][j] = HashA1[i - 1][j] * p1 + HashA[i][j];
        }
    }
}

ull get_hash(int lx, int ly, int rx, int ry) { // 获取左上角为(lx, ly)右下角是(rx, ry)矩阵的hash值
    ull temp = HashA1[rx][ry] - HashA1[lx - 1][ry] * Powp1[rx - lx + 1] -HashA1[rx][ly - 1] * Powp[ry - ly + 1]
    + HashA1[lx - 1][ly - 1] * Powp1[rx - lx + 1] * Powp[ry - ly + 1];
    return temp;

}

string s[N];

typedef long long ll;

map<ll, int>vis;
int n, m;
bool judge(int i) {

    for (int j = 1; j <= n; j++) {
        for (int k = 1; k <= m; k++) {
            if (j + i <= n && k + i <= m) {
                ll cnt = get_hash(j, k, j + i, k + i);
                if (vis[cnt]) {
                    // cout << i + 1 << endl;
                    return true;
                }
                vis[cnt]++;
            } else {
                break;
            }
        }
    }
    return false;
}

int main() {

    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        cin >> (str[i] + 1);
    }

    init();
    make_hash(n, m);

   // cout << get_hash(1, 1, 3, 3) << " " << get_hash(3, 3, 5, 5) << endl;
    int l = 0, r = min(n, m), ans;

    while (l <= r) {
        int mid = (l + r) / 2;
        if (judge(mid)) {
            ans = mid;
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
  
    cout << ans + 1 << endl;
}