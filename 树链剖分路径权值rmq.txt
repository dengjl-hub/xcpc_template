#include <iostream>
#include<string>
#include<string.h>
#include<cstring>
#include<fstream>
#include<iomanip>
#include<algorithm>
#include<string>
#include<random>
#include<string.h>
#include<vector>
#include<cstdlib>
#include<time.h>
#include<math.h>
#include<bitset>
#include<cmath>
#include<stdlib.h>
#include<set>
#include<sstream>
#include<map>
#include<stdio.h>
#include<cstring>
#include<queue>
using namespace std;
#define lson rt<<1
#define rson rt<<1|1
#define mid (l+r)>>1
#define mes(x) memset(x,0,sizeof x)
typedef long long LL;
typedef long long ll;
typedef pair<LL, LL> pll;
typedef pair<signed, signed>P;
#define int long long
const signed inf = 200000000;

const long long maxn = 400100;		//特以此纪念本人数据范围开小卡90分卡两天
int a[maxn], rk[maxn], tree[maxn], mx[maxn], tag[maxn], n, m, mod, x, y, z, S, cnt;
int large[maxn], seg[maxn], father[maxn], vis[maxn], dep[maxn], son[maxn], rev[maxn], top[maxn];
int Next[maxn], head[maxn], from[maxn], to[maxn], id[maxn], tot;
int arr[maxn];
//********************以下线段树********************
void pushup(int rt);
void pushdown(int rt, int l, int r)
{
	if (tag[rt])
	{
		int m = mid;
		tree[lson] += tag[rt] * (m - l + 1);
		tree[rson] += tag[rt] * (r - m);
		tag[lson] += tag[rt];
		tag[rson] += tag[rt];
		tag[rt] = 0;
	}
}
void build(int rt, int l, int r)
{
	int md = mid;
	if (l == r)
	{
		mx[rt] = tree[rt] = arr[rk[l]];
		return;
	}
	build(lson, l, md);
	build(rson, md + 1, r);
	pushup(rt);
}
//sum
int query_sum(int rt, int l, int r, int L, int R) {
	if (L <= l && r <= R)
		return tree[rt];
	else {
		int m = mid, res = 0;
		pushdown(rt, l, r);
		if (L <= m)
			res += query_sum(lson, l, m, L, R);
		if (R > m)
			res += query_sum(rson, m + 1, r, L, R);
		pushup(rt);
		return res;
	}
}
int query_max(int rt, int l, int r, int L, int R) {
	if (L <= l && r <= R)
		return mx[rt];
	else {
		int m = mid, res = -1000000000;
		//pushdown(rt, l, r);
		//mx[rt] = max(mx[lson], mx[rson]);
		if (L <= m)
			res = max(res, query_max(lson, l, m, L, R));
		if (R > m)
			res = max(res, query_max(rson, m + 1, r, L, R));
		pushup(rt);
		return res;
	}
}
void pushup(int rt)
{
	mx[rt] = max(mx[lson], mx[rson]);
	tree[rt] = tree[lson] + tree[rson];
}
void update(int rt, int l, int r, int L, int R, int val) {
	if (L <= l && r <= R) {
		(tree[rt] += val * (r - l + 1));//逐一是区间赋值还是区间加一个权值
		(tag[rt] += val);
	}
	else {
		int m = mid;
		pushdown(rt, l, r);
		if (L <= m) {
			update(lson, l, m, L, R, val);
		}
		if (R > m) {
			update(rson, m + 1, r, L, R, val);
		}
		//tree[rt] = (tree[lson] + tree[rson]);
		pushup(rt);
	}
}
//********************以上线段树********************
//********************以下树链剖分********************
void dfs1(int x, int f) {
	//cout << 1 << endl;
	large[x] = 1; father[x] = f;
	dep[x] = dep[f] + 1;
	int maxy = 0;
	for (int i = head[x]; i != -1; i = Next[i]) {
		int u = to[i], big = 0;
		if (u == f)continue;
		dfs1(u, x);
		large[x] += large[u];
		if (large[u] > maxy) { son[x] = u; maxy = large[u]; }
	}
}
void dfs2(int x, int f) {
	top[x] = f; id[x] = ++tot, rk[tot] = x;
	//cout << x << endl;
	if (son[x]) {
		dfs2(son[x], f);
	}
	for (int i = head[x]; i != -1; i = Next[i]) {
		int u = to[i];
		if (u != son[x] && u != father[x]) {
			dfs2(u, u);
		}
	}
}
inline int sum(int x, int y)
{
	LL ans = 0;
	while (top[x] != top[y])
	{
		if (dep[top[x]] < dep[top[y]])
		{
			swap(x, y);
		}
		(ans += query_sum(1, 1, n, id[top[x]], id[x]));
		x = father[top[x]];
	}
	if (dep[x] > dep[y])swap(x, y);
	return (ans + query_sum(1, 1, n, id[x], id[y]));
}
inline int Max(int x, int y)
{
	int ans = -1000000000;
	while (top[x] != top[y])
	{
		if (dep[top[x]] < dep[top[y]])swap(x, y);
		ans = max(ans, query_max(1, 1, n, id[top[x]], id[x]));
		x = father[top[x]];
	}
	if (dep[x] > dep[y])swap(x, y);
	return max(ans, query_max(1, 1, n, id[x], id[y]));
}
void update_long(signed x, signed y, signed z)
{
	while (top[x] != top[y])
	{
		if (dep[top[x]] <= dep[top[y]])
		{
			update(1, 1, n, id[top[y]], id[y], z);
			y = father[top[y]];
		}
		else
		{
			update(1, 1, n, id[top[x]], id[x], z);
			x = father[top[x]];
		}
	}
	if (dep[x] > dep[y])swap(x, y);
	update(1, 1, n, id[x], id[y], z);
}
//********************以上树链剖分********************
void add(int x, int y) {	//建边 
	cnt++;
	from[cnt] = x; to[cnt] = y;
	Next[cnt] = head[x]; head[x] = cnt;
}
//int arr[maxn];
//********************以下主程序********************
bool noroot[maxn];
signed main() {
	ios::sync_with_stdio(0), cout.tie(0), cin.tie(0);

	int S = 1;
	memset(head, -1, sizeof head);
	cin >> n;
	for (int i = 0; i < n - 1; i++)
	{
		int u, v;
		cin >> u >> v;
		u++, v++;
		add(u, v);
		add(v, u);
		noroot[v] = 1;
	}
	for (int i = 1; i <= n; i++)
		if (!noroot[i])S = i;
	
	father[1] = 0;
	dfs1(S, 0);
	dfs2(S, S);
	/*for (int i = 1; i <= n; i++)
		update(1, 1, n, i, i, arr[rk[i]]);*/
	build(1, 1, n);
	//cout << "aa";
	cin >> m;
	while (m--)
	{
		string op;
		int  x, y, z;
		cin >> op;
		if (op == "A")
		{
			cin >> x >> y>>z;
			x++, y++;
			update_long(x, y,z);
		}
		else {
			cin >> x;
			x++;
			cout << query_sum(1, 1, n, id[x], id[x] + large[x] - 1)<<'\n';
		}
	}
	system("pause");
	return 0;
}//光棍数字收