const int maxn = 4004;
struct edge
{
	int v, nex;

}e[maxn<<4];
int n, m, cnt;
int flag[maxn][2], vis[maxn];
signed head[maxn];
inline void add_edge(int u, int v)
{
	++cnt;
	e[cnt] = { v, head[u] };
	head[u] = cnt;
}
bool dfs(int x)
{
	for (int j = head[x]; j; j = e[j].nex)
	{
		int v = e[j].v;
		if (!vis[v])
		{
			vis[v]++;
			if (!flag[v][0] || dfs(flag[v][0]))
			{
				flag[v][0] = x;
				return 1;
			}
			if (!flag[v][1] || dfs(flag[v][1]))
			{
				flag[v][1] = x;
				return 1;
			}

		}
	}
	return 0;
}
int solve()//*****注意初始化的时候尽可能快
{
	int ans = 0;
	int a, b, n;
	cin >> n;
	for (int i = 1; i <= 2 * n; i++)
	{
		cin >> a >> b;
		add_edge(i, b);
		add_edge(i, a);
	}
	for (int i = 1; i <= 2 * n; i++)
	{
		memset(vis, 0, sizeof vis);
		if (dfs(i))ans++;
	}
	return ans;
}