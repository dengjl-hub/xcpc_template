#include<bits/stdc++.h>
using namespace std;
typedef long long LL;

int rd(){
	int w=1,c,ret=0;
	while((c=getchar())> '9'||c< '0')
	w=(c=='-'?-1:1); ret=c-'0';
	while((c=getchar())>='0'&&c<='9')
	ret=ret*10+c-'0';
	return ret*w;
}
void qwrite(int x){
	if(x<0) x=-x,putchar('-');
	if(x>9) qwrite(x/10);
	putchar('0'+x%10);
}
LL exgcd(LL a,LL b,LL &x,LL &y){
	LL d=a; if(b==0) x=1,y=0; else{
		d=exgcd(b,a%b,y,x),y-=a/b*x;
	}
	return d;
}
int main(){
    int t;
    t=rd();
	while(t--){
		LL a=rd(),b=rd(),c=rd(),x,y;
		LL d=exgcd(a,b,x,y);
		if(c%d!=0) puts("-1"); else{
			x*=c/d,y*=c/d; LL p=b/d,q=a/d,k;
			if(x<0) k=ceil((1.0-x)/p),x+=p*k,y-=q*k; else	//将x提高到最小正整数 
			if(x>=0)k=(x-1)/p ,x-=p*k,y+=q*k;		//将x降低到最小正整数 
			if(y>0){	//有正整数解 
				printf("%lld ",(y-1)/q+1);	//正整数解的数量。将y减到1的方案数即为解的个数 
				printf("%lld ",x);		//所有解中最小的正整数x。当前的x即为最小正整数x
				printf("%lld ",(y-1)%q+1); 	//将y取到最小正整数 
				printf("%lld ",x+(y-1)/q*p);	//将x提升到最大 
				printf("%lld ",y);		//特解即为y最大值 
			} else{		//无正整数解 
				printf("%lld " ,x);			//当前的x即为最小的正整数x 
				printf("%lld",y+q*(LL)ceil((1.0-y)/q)); //将y提高到正整数 
			}
			puts("");
		}
	}
	return 0;
}