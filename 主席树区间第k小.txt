#include <iostream>
#include<fstream>
#include<iomanip>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<cstdlib>
#include<time.h>
#include<math.h>
#include<cmath>
#include<stdlib.h>
#include<set>
#include<map>
#include<unordered_map>
#include<queue>
using namespace std;
#define lson rt<<1
#define rson rt<<1|1
#define mid (l+r)>>1
using namespace std;
#define int long long
const int maxn = 2e5 + 5;
signed arr[maxn];
signed b[maxn];
int cnt = 0,n,m,q;
signed sum[maxn << 5], L[maxn << 5], R[maxn << 5],T[maxn];
inline signed build(signed l, signed r)
{
	signed rt = ++cnt;
	sum[rt] = 0;
	signed md = mid;
	if (l < r) L[rt] = build(l, md), R[rt] = build(md + 1, r);
	return rt;
}
inline signed update(signed pre, signed l, signed r, signed x)
{
	signed rt = ++cnt;
	L[rt] = L[pre], R[rt] = R[pre], sum[rt] = sum[pre] + 1;
	if (l < r)
		if (x <= (mid))L[rt] = update(L[pre], l, mid, x);
		else R[rt] = update(R[pre], (mid) + 1, r, x);
	return rt;
}
inline signed query(signed u, signed v, signed l, signed r,signed k)
{
	if (l >= r)return l;
	signed x = sum[L[v]] - sum[L[u]];
	if (x >= k)return query(L[u], L[v], l, mid, k);
	else return query(R[u], R[v], (mid)+1, r, k - x);
}

signed main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);
	signed t;
	cin >> n >> q;
	for (int i = 1; i <= n; i++)cin >> arr[i],b[i]=arr[i];
	sort(b + 1, b + 1 + n);
	m = unique(b + 1, b + 1 + n) - b - 1;
	T[0] = build(1, m);
	for (int i = 1; i <= n; i++)
	{
		signed t = lower_bound(b + 1, b + 1 + m, arr[i]) - b;
		T[i] = update(T[i - 1], 1, m, t);
	}
	while (q--)
	{
		signed x, y, z;
		cin >> x >> y >> z;
		signed t = query(T[x - 1], T[y], 1, m, z);
		cout << b[t] << '\n';
	}
//	system("pause");
	return 0;
}