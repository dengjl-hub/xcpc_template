/*
给出一个n*n的矩阵,每一格有一个非负整数Aij,(Aij <= 1000)现在从(1,1)出发,可以往右或者往下走,
最后到达(n,n),每达到一格,把该格子的数取出来,
该格子的数就变成0,这样一共走K次,现在要求K次所达到的方格的数的和最大 题解
*/
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<queue>
using namespace std;
const int maxn=100001;
const int inf=1e9;

int n,m,S,T,k,maxflow,mincost,last[maxn],pre[maxn],dis[maxn],flow[maxn];
bool vis[maxn];
struct Edge{
	int next,to,flow,dis;
}edge[maxn<<1];
int num_edge=-1,head[maxn];
queue <int> q;
int id(int x,int y) {return n*(x-1)+y;}

void add_edge(int from,int to,int flow,int dis)//flow流量 dis费用 
{
	edge[++num_edge].next=head[from];
	edge[num_edge].flow=flow;
	edge[num_edge].dis=dis;
	edge[num_edge].to=to;
	head[from]=num_edge;
}
void add(int x,int y,int z,int f) {add_edge(x,y,z,f); add_edge(y,x,0,-f);}

bool spfa(int s,int t)
{
	memset(dis,0x7f,sizeof(dis));
	memset(flow,0x7f,sizeof(flow));
	memset(vis,0,sizeof(vis));
	while (!q.empty()) q.pop();
	dis[s]=0; pre[t]=-1; q.push(s); vis[s]=1;
	int tot=0;
	while (!q.empty())
	{
		int now=q.front(); q.pop(); vis[now]=0;
//		printf("%d ",now); if (++tot==200) return 0;
		for (int i=head[now]; i!=-1; i=edge[i].next)
		{
			int to=edge[i].to;
			if  (edge[i].flow>0 && dis[to]>dis[now]+edge[i].dis)
			{
				dis[to]=edge[i].dis+dis[now];
				flow[to]=min(edge[i].flow,flow[now]);
				last[to]=i;
				pre[to]=now;
				if (!vis[to])
				{
					q.push(to); vis[to]=1;
				}
			}
		}
	}
	return pre[t]!=-1;
}

void MCMF(int s,int t)
{
	while (spfa(s,t))
	{
		int now=t;
		maxflow+=flow[t];
		mincost+=flow[t]*dis[t];
		while (now!=s)
		{
			edge[last[now]].flow-=flow[t];//dis . flow
			edge[last[now]^1].flow+=flow[t];
			now=pre[now];
		}
	}
}

int main()
{
	memset(head,-1,sizeof(head));
	scanf("%d%d",&n,&k);
	S=0; T=2*n*n+1;
	add(S,id(1,1),k,0); add(id(n,n)+n*n,T,k,0);
	for (int i=1; i<=n; i++)
		for (int j=1; j<=n; j++)
		{
			int x; scanf("%d",&x); x=-x;
			add(id(i,j),id(i,j)+n*n,1,x);
			add(id(i,j),id(i,j)+n*n,inf,0);
			if (i<n) add(id(i,j)+n*n,id(i+1,j),inf,0);
			if (j<n) add(id(i,j)+n*n,id(i,j+1),inf,0);
		}
	for (int i=0; i<=num_edge; i++) 
//	printf("%d: %d %d %d %d\n",i,edge[i^1].to,edge[i].to,edge[i].dis,edge[i].flow);
	n=T;//点数 
	MCMF(S,T);
	printf("%d",-mincost);
	return 0;
}