#include <iostream>
#include<fstream>
#include<iomanip>
#include<algorithm>
#include<string>
#include<string.h>
#include<vector>
#include<cstdlib>
#include<time.h>
#include<math.h>
#include<cmath>
#include<stdlib.h>
#include<set>
#include<map>
#include<unordered_map>
#include<queue>
using namespace std;
#define lson rt<<1
#define rson rt<<1|1
#define mid (l+r)>>1
typedef long long LL;
typedef long long ll;
typedef pair<LL, LL> pll;
typedef pair<signed, signed>P;
using namespace std;
#define int long long

inline int rd() {
	int ans = 0; char last = ' ', ch = getchar();
	while (!(ch >= '0' && ch <= '9'))last = ch, ch = getchar();
	while (ch >= '0' && ch <= '9')ans = ans * 10 + ch - '0', ch = getchar();
	if (last == '-')ans = -ans;
	return ans;
}
const int maxn = 2e5+5;
signed mn[maxn << 2];//区间最小值
signed sum[maxn << 2];//区间和
signed cnt[maxn];//k个数最右的位置都标为1
int arr[maxn];
inline void pushup1(int rt)
{
	mn[rt] = min(mn[lson], mn[rson]);
}
inline void pushup2(int rt)
{
	sum[rt] = sum[lson] + sum[rson];
}
void build1(signed l, signed r, signed rt)
{
	if (l == r)
	{
		mn[rt] = arr[l]; return;
	}
	signed md = mid;
	build1(l, md, lson);
	build1(md + 1, r, rson);
	pushup1(rt);
}
void build2(signed l, signed r, signed rt)
{
	if (l == r)
	{
		sum[rt] = cnt[l]; return;
	}
	signed md = mid;
	build2(l, md, lson);
	build2(md + 1, r, rson);
	pushup2(rt);
}
void update1(int l, int r, int rt, int pos, int val)
{
	if (l == r)
	{
		mn[rt] = val;
		return;
	}
	int md = mid;
	if (pos <= md)update1(l, md, lson, pos, val);
	else update1(md + 1, r, rson, pos, val);
	pushup1(rt);
}
void update2(int l, int r, int rt, int pos, int val)
{
	if (l == r)
	{
		sum[rt] = val;
		return;
	}
	int md = mid;
	if (pos <= md)update2(l, md, lson, pos, val);
	else update2(md + 1, r, rson, pos, val);
	pushup2(rt);
}
int q1(int l, int r, int rt, int t)//定位到后缀和为k的最右位置
{
	//cout << "q1" << l << " " << r << endl;
	if (l == r)
		return l;
	int x = sum[rson];
	if (t > x)return q1(l, mid, lson, t - x);
	else return q1((mid)+1, r, rson, t);
}
int q2(int l, int r, int rt, int L, int R)//L，R区间最小值
{
	//cout << "q2" << " " << l << " " << r << endl;
	if (L <= l && r <= R)return mn[rt];
	int md = mid;
	LL ans = 1e8;
	if (L <= md)ans = min(ans, q2(l, md, lson, L, R));
	if (R > md)ans = min(ans, q2(md + 1, r, rson, L, R));
	return ans;
}
vector<signed>pos[maxn];

signed main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	signed t,n,k;
	cin >> n>>k;
	for (int i = 1; i <= n; i++)
		cin >> arr[i],pos[arr[i]].push_back(i);//pos记录每个1到k的数字的位置
	for (int i = 1; i <= k; i++)
		cnt[pos[i].back()] = 1;//最右端的位置记为1
	
	build1(1, n, 1);
	build2(1, n, 1);
	int cur = 0;//用于确定区间查找的左端点，表示上一次输出的值在序列中的位置
	for (int i = 1; i <= k; i++)
	{
		int fir = q1(1, n, 1, k - i + 1);//定位到第一个前缀和为k-i+1的位置
		//cout <<"fir "<< fir<<" "<<cur << endl;
		int ans = q2(1, n, 1, cur+1, fir);
		cout << ans<<" ";
		//pos[ans][id]表示在查找范围内的第一个ans的位置,下一次查找必须在当前输出的位置以后，否则会输出的不算子序列
		int id = lower_bound(pos[ans].begin(), pos[ans].end(), cur + 1) - pos[ans].begin();
		cur = pos[ans][id];
		//把取出来的标记为正无穷
		for (int i = 0; i < pos[ans].size(); i++)
			update1(1, n, 1, pos[ans][i], 1e9);// , cout << pos[ans][i] << endl;
		//标记记为0
		update2(1, n, 1, pos[ans].back(), 0);
	}
	//system("pause");
	return 0;
}